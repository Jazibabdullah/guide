Dynamic Membership Changement
=============================
Raft consensus를 사용하는 blockchain에는 enterprise transaction을 통해 멤버를 동적으로 추가 하거나 삭제 할 수 있다. 이 때 running node를 shutdown하거나 config file을 변경하지 않아도 된다.
enterprise transaction에 관한 설명은 `transacion-types<../specs/transactions.html#transaction-types>`__ 를 참고한다.
이 글은 3 node로 구성된 Aergo blockchain network를 가정하고 Membership 변경을 설명한다.

개요
----

Term
^^^^
- Cluster 
  
  Raft로 구성된 blockchain node들의 network

주의 사항
^^^^^^^^^
**변경은 한번에 하나씩 수행해야 한다.**

새 노드 추가시 Block Chain Sync가 끝나지 않은 상태로 다시 다른 노드 추가를 하면 안된다. 새 노드는 리더와 동기화가 완료되어 최신 상태가 될 때 까지 Raft 입장에서 Unavailable상태이다. 즉 리더의 로그를 commit하기 위한 한표를 행사 할수 없다. (장애 노드 + Sync 안된 노드의 수)가 N/2 이상>이 되는 순간 Cluster는 stop 된다. stop된 cluster는 특정 노드가 sync 완료 된 후 동기화가 완료 되면 resume된다.                                    

Validation
^^^^^^^^^^
membership 변경 transaction 수행시 서버에서 실행 가능한 상황인지 검사한다.

- Add 실행 불가
    
  전체 Network에서 제대로 동기화 되지 않고 있는 노드가 하나라도 있는 경우 실패 처리 된다. 해당 노드는 shutdown 상태이거나, 장애 상태로 동기화가 느려진 상태를 말한다.

- Remove 실행 불가

  해당 노드를 제외 했을 경우 Network가 stop 될 수 있는 경우 삭제 요청이 실패 처리 된다. 장애 노드에 대한 삭제는 항상 성공한다. 하지만 정상 노드를 삭제하고자 할때는 해당 노드를 제외하고 정상 노드의 수가 (변경후 N )/ 2 이하 인 경우 실패하게 된다.

사전 작업 
^^^^^^^^^
Enterprise Transaction으로 명령을 수행하기 위해 Enterprise Admin 계정을 설정하고 unlock 해준다. 이는 `transacion-types <../specs/transactions.html#transaction-types>`__ 글을 참고한다.

Add Member
----------
노드 추가 command 실행
^^^^^^^^^^^^^^^^^^^^^^

cluster 노드 중 하나에 enterprise transaction를 send 한다. 

.. code-block:: shell

    aergocli -p [RPC PORT] contract call --governance [ADMIN ACCOUNT] aergo.enterprise changeCluster [ { "command": "add", "name": "[NODE NAME]", "address": "[PEER ADDRESS]", "peerid":"[PEER ID]" } ]

    example> aergocli -p 10001 contract call --governance AmQJ6HTxMzq5eios54xubENE2wAe4puF3GDuaFxBzXkWa4KpfnWr aergo.enterprise changeCluster [ { "command": "add", "name": "raft4", "address": "/ip4/127.0.0.1/tcp/11004", "peerid":"16Uiu2HAmQti7HLHC9rXqkeABtauv2YsCPG3Uo1WLqbXmbuxpbjmF" } ]


command 결과 확인
^^^^^^^^^^^^^^^^^
cluster 노드 중 하나에 enterprise tx 결과를 query 한다.

.. code-block:: shell

  aergocli -p [RPC PORT] enterprise tx "[ENTERPRISE TX HASH]" --timeout=[VALUE IN SECONDS]


변경된 cluster 상태는 getconsensusinfo RPC를 이용해 확인 할 수 있다. "Total"은 전체 노드수를 나타내고 "Bps"는 block producer list를 포함한다.

.. code-block:: shell

    aergocli -p 10001 getconsensusinfo

Write configuration for a new node
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
추가할 노드의 Config에는 P2P(npaddpeers) 설정에 접속 가능한  cluster의 서버들의 접속 주소를 설정해준다. 되도록 cluster의 모든 서버 주소를 npaddpeers에 등록해준다. 하지만 필요한 경우 cluster 서버들중 접속 가능한 1개만 설정해도 동작한다. 

.. code-block:: shell

    [p2p]
    ...
    npaddpeers = [
    "/ip4/[IP ADDRESS FROM BP 01]/tcp/7846/p2p/[PEER ID FROM BP 01]",
    "/ip4/[IP ADDRESS FROM BP 02]/tcp/7846/p2p/[PEER ID FROM BP 02]",
    "/ip4/[IP ADDRESS FROM BP 03]/tcp/7846/p2p/[PEER ID FROM BP 03]"
    ]
    ...

    [consensus.raft]
    newcluster=false
    name="[NICKNAME OF NEW BP]"

Running
^^^^^^^
`Configuring a Network <../running-node/configure-network.html#configuring-a-network>`__ 페이지를 참고하여 새로운 노드를 시작한다.

추가한 노드가 기존 blockchain과 동기화가 완료되기를 기다린다.

- 새로운 노드가 leader를 인지 했는지 확인

    ConsensusInfo.Status.Leader 가 node 이름중 하나로 설정되어 있다면 Leader를 찾은 것이다.

    .. code-block:: shell

        aergocli -p 10004 blockchain
        > {"Hash":"3ivEw2o97WkpEvarBkVEYWCAQXhQ7BpHwmzs2L4WXUzJ","Height":7302,"ConsensusInfo":{"Type":"raft","Status":{"Leader":"raft1","Total":3,"Name":"raft4","RaftId":"dd44cf1a06727dc5","Status":null}},"ChainIdHash":"A9gpZUsFS9BVEfpUy6gbJ7YtGuHsYAmzamWkhDo54cak"}

- 새 노드의 BlockChain Height가 Leader와 일치 되었는지 확인

    .. code-block:: shell

        aergocli -p [RPC PORT OF LEADER] blockchain
        aergocli -p [RPC PORT OF NEW NODE] blockchain


Remove Member
-------------

**Get Raft ID to remove**

삭제를 위해서는 삭제할 노드의 Raft ID를 얻어와야 한다. Raft ID는 Raft에 노드가 추가 된 후 부여되는 값으로 Raft Consensus에서 각 node를 unique하게 구분하기 위한 값이다.


.. code-block:: shell

 aergocli -p 10004 blockchain
 > {"Hash":"...","Height":7302,"ConsensusInfo":{"Type":"raft","Status":{"Leader":"raft1","Total":4,"Name":"raft4","RaftId":"dd44cf1a06727dc5","Status":null}},"ChainIdHash":"..."}

blockchain RPC를 수행한 결과에서 ConsensusInfo.Status.RaftID를 참고한다. 위 예제에서는 `"dd44cf1a06727dc5"` 가 "raft4" node의 Raft ID 이다.

**Run enterprise transaction**

.. code-block:: shell

    aergocli -p [RPC PORT] contract call --governance [ADMIN ACCOUNT] aergo.enterprise changeCluster [ { "command": "remove", "id": "[RAFT ID]" } ]

    example> aergocli -p 10001 contract call --governance AmQJ6HTxMzq5eios54xubENE2wAe4puF3GDuaFxBzXkWa4KpfnWr aergo.enterprise changeCluster '[ { "command": "remove", "id": "dd44cf1a06727dc5" } ]'


**Check result of enterprise transaction**

노드 추가와 마찬 가지로 getconsensusinfo RPC의 결과에서 "Total"과 "Bps"를 확인한다.

.. code-block:: shell

    aergocli -p 10001 getconsensusinfo

**Wait shutdown removed node**

삭제된 노드에서 삭제 Enterprise Transaction이 실행될 때 해당 노드는 self shutdown 된다.

Add Member with Backup
----------------------
새로운 노드를 추가하면 기존의 Blockchain을 동기화하는데 긴 시간이 소요된다. 이 시간을 단축하기 위해 기존 노드에서 data files를 copy해서 사용해서 새로운 노드를 추가 할 수 있다. copy된 data files를 이용하여 추가된 노드는 시작시에 data file에서 Cluster 관련 정보를 모두 초기화 하기 때문에 기존의 노드 정보와 충돌이 발생하지 않는다.

**Prepare backup datafiles**

기존 노드의 backup datafiles을 준비한다. backup datafiles는 Old cluster에 속해 있던 노드의 datadir 디렉토리를 통채로 복사해서 새로 Cluster를 구성할 노드의 Storage에 복사해둔다.

data file에는 blockchain이 이미 생성되어 있으므로, genesis block은 생성 할 필요가 없다.

**Write Configuration file**

.. code-block:: shell
    datadir="[copied data directory]"

    [p2p]
    ...
    npaddpeers = [
    "/ip4/[IP ADDRESS FROM BP 01]/tcp/7846/p2p/[PEER ID FROM BP 01]",
    "/ip4/[IP ADDRESS FROM BP 02]/tcp/7846/p2p/[PEER ID FROM BP 02]",
    "/ip4/[IP ADDRESS FROM BP 03]/tcp/7846/p2p/[PEER ID FROM BP 03]"
    ]
    ...

    [consensus.raft]
    newcluster=false
	usebackup=true
    name="[NICKNAME OF NEW BP]"

이 외 과정은 backup을 사용하지 않는 과정과 동일하다.
